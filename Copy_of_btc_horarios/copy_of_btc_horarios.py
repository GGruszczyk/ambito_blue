# -*- coding: utf-8 -*-
"""Copy of btc_horarios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1riAF95Quqw95b1qn3CaKFU_2WbKh2b9y

# Funciones Necesarias
"""

import time
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import requests
from datetime import datetime, timedelta
import threading

def historico(symbol, interval='1d', startTime=None, endTime=None, limit=1000):

    url = 'https://api.binance.com/api/v3/klines'

    params = {'symbol':symbol, 'interval':interval,
              'startTime':startTime, 'endTime':endTime, 'limit':limit}

    r = requests.get(url, params=params)
    js = r.json()

    # Armo el dataframe
    cols = ['openTime','Open','High','Low','Close','Volume','cTime',
            'qVolume','trades','takerBase','takerQuote','Ignore']

    df = pd.DataFrame(js, columns=cols)

    #Convierto los valores strings a numeros
    df = df.apply(pd.to_numeric)

    # Le mando indice de timestamp
    df.index = pd.to_datetime(df.openTime, unit='ms')

    # Elimino columnas que no quiero
    df =df.drop(['openTime','cTime','takerBase','takerQuote','Ignore'],axis=1)

    return df

#historico('BTCUSDT', interval='2h')

def historico_binance(par, inicio, timeframe_minutos=1, n_threads=30):

    ts = int(datetime.timestamp(inicio))*1000
    fechas = []
    while ts < int(datetime.timestamp(datetime.now()))*1000:
        fechas.append((ts, ts+60*1000*1000*timeframe_minutos))
        ts += 60*1000*1000*timeframe_minutos

    intervalos = {1:'1m',5:'5m',15:'15m',30:'30m',60:'1h',1440:'1d'}
    interval = intervalos.get(timeframe_minutos)
    subs = np.array_split(fechas, n_threads)
    dfs = []
    def worker(fechas):
        for fecha in fechas:
            try:
                df = historico(par, interval=interval, startTime=fecha[0])
            except:
                time.sleep(0.01)
                df = historico(par, interval=interval, startTime=fecha[0])
            dfs.append(df)
        return df


    threads = []
    for i in range(n_threads):
        t = threading.Thread(target=worker, args=(subs[i],))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    data = pd.concat(dfs).sort_index()
    data.index = pd.to_datetime(data.index)

    return data.dropna()

inicio = datetime(2017,1,1)
df = historico_binance('BTCUSDT', inicio, timeframe_minutos=15, n_threads=30)
df = df.resample('15T').last()
df

df['horario'] = df.index.time
df['variacion'] = df.Close.pct_change()
agg = df.groupby('horario').variacion.median()
title = 'Variacion mediana BTC por horario UTC, timeframe 15min'
agg.plot(kind='bar', figsize=(18,9), title=title, grid=True)

